---
- name: create nginx repo definition
  copy:
    src: nginx.repo
    dest: /etc/yum.repos.d/nginx.repo
    owner: root
    group: root
    mode: 0644

- name: install nginx
  yum:
    name: nginx
    update_cache: true
    state: present

- name: ensure nginx is enabled and started
  service:
    name: nginx
    state: started
    enabled: true

- name: copy main nginx config file
  copy:
    src: files/nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

# - name: copy site's nginx config file
#   template:
#     src: templates/nginx.conf.j2
#     dest: /etc/nginx/conf.d/notls.conf
#     owner: root
#     group: root
#     mode: 0644
#   notify: restart nginx

- name: copy site1 nginx config file
  template:
    src: templates/nginx_v1.conf.j2
    dest: /etc/nginx/conf.d/{{ virtual_host1 }}.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: copy site2 nginx config file
  template:
    src: templates/nginx_v2.conf.j2
    dest: /etc/nginx/conf.d/{{ virtual_host2 }}.conf
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: copy index.html
  template:
    src: templates/index.html.j2
    dest: /usr/share/nginx/html/index.html
    owner: root
    group: root
    mode: 0644
  notify: restart nginx

- name: Populate service facts
  service_facts:
  register: service_facts_list

- name: insert firewalld rule for nginx
  firewalld:
    port: "{{ nginx_port_no_tls }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  ignore_errors: true
  when: service_facts_list.ansible_facts.services["firewalld.service"].state == "running"
  
- name: insert firewalld rule for nginx tls
  firewalld:
    port: "{{ nginx_port_tls }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  ignore_errors: true
  when: service_facts_list.ansible_facts.services["firewalld.service"].state == "running"
